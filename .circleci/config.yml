
version: 2.1

commands:
  run-build:        
    steps:
    - checkout
    - run:
        name: Set Variables
        command: |
          echo 'export MIN_PHP=7.1.3' >> $BASH_ENV
          echo 'export SYMFONY_PROCESS_PHP_TEST_BINARY=php' >> $BASH_ENV
          echo 'export MESSENGER_AMQP_DSN=amqp://localhost/%2f/messages' >> $BASH_ENV
          echo 'export MESSENGER_REDIS_DSN=redis://127.0.0.1:7001/messages' >> $BASH_ENV
          echo 'export SYMFONY_PHPUNIT_DISABLE_RESULT_CACHE=1' >> $BASH_ENV

          # TODO - make ldap work on CircleCI; skip them for now
          echo 'export skip=true' >> $BASH_ENV
    - restore_cache:
        key: dependencies-v1-{{ .Environment.CIRCLE_JOB }}
    - run: 
        name: Install APT Dependencies
        command: |          
          sudo apt update
          sudo apt install default-jdk libmemcached-dev libxml2-dev parallel ldap-utils slapd zookeeperd libzookeeper-mt-dev rabbitmq-server librabbitmq-dev libsodium-dev
          
          # Install French language pack (Debian)
          wget http://archive.ubuntu.com/ubuntu/pool/main/l/language-pack-fr/language-pack-fr_16.04+20160415_all.deb
          wget http://archive.ubuntu.com/ubuntu/pool/main/l/language-pack-fr-base/language-pack-fr-base_16.04+20160415_all.deb
          sudo dpkg -i language-pack-fr-base_16.04+20160415_all.deb || true
          sudo dpkg -i language-pack-fr_16.04+20160415_all.deb || true
          sudo apt-get install -f
          sudo dpkg --configure -a                      
    - run: 
        name: Install PHP Extensions
        command: |       
          sudo docker-php-ext-install -j$(nproc) bcmath
          sudo docker-php-ext-install -j$(nproc) pdo_mysql
          sudo docker-php-ext-install -j$(nproc) pcntl
    - run:
        name: Define Helper Functions
        command: |
          cat \<< 'EOF' > ./functions.sh
          nanoseconds () {
              local cmd="date"
              local format="+%s%N"
              local os=$(uname)
              if hash gdate > /dev/null 2>&1; then
                cmd="gdate"
              elif [[ "$os" = Darwin ]]; then
                format="+%s000000000"
              fi
              $cmd -u $format
          }
          export -f nanoseconds

          # tfold is a helper to create folded reports
          tfold () {
              local title="🐘 $PHP $1"
              local fold=$(echo $title | sed -r 's/[^-_A-Za-z0-9]+/./g')
              shift
              local id=$(printf %08x $(( RANDOM * RANDOM )))
              local start=$(nanoseconds)
              echo -e "travis_fold:start:$fold"
              echo -e "travis_time:start:$id"
              echo -e "\\e[1;34m$title\\e[0m"
              bash -xc "$*" 2>&1
              local ok=$?
              local end=$(nanoseconds)
              echo -e "\\ntravis_time:end:$id:start=$start,finish=$end,duration=$(($end-$start))"
              (exit $ok) &&
                  echo -e "\\e[32mOK\\e[0m $title\\n\\ntravis_fold:end:$fold" ||
                  echo -e "\\e[41mKO\\e[0m $title\\n"
              (exit $ok)
          }
          export -f tfold

          # tpecl is a helper to compile and cache php extensions
          tpecl () {
              local ext_name=$1
              local ext_so=$2
              local INI=$3
              local input=${4:-yes}
              local ext_dir=$(php -r "echo ini_get('extension_dir');")
              local ext_cache=~/php-ext/$(basename $ext_dir)/$ext_name
              if [[ -e $ext_cache/$ext_so ]]; then
                  echo extension = $ext_cache/$ext_so | sudo tee -a $INI > /dev/null
              else
                  rm ~/.pearrc /tmp/pear 2>/dev/null || true
                  mkdir -p $ext_cache
                  echo $input | sudo pecl install -f $ext_name &&
                  cp $ext_dir/$ext_so $ext_cache
              fi
          }
          export -f tpecl

          run_tests () {
            set -e
            export PHP=$1
            if [[ $PHP != $PHP_VERSION && ! -z $CIRCLE_PULL_REQUEST ]]; then
                echo -e "\\n\\e[1;34mIntermediate PHP version $PHP is skipped for pull requests.\\e[0m"
                break
            fi            
            ([[ $deps ]] && cd src/Symfony/Component/HttpFoundation; composer config platform.ext-mongodb 1.6.0; composer require --dev --no-update mongodb/mongodb)            
            tfold 'composer update' $COMPOSER_UP
            tfold 'phpunit install' ./phpunit install
            
            # TODO - make all tests pass on CircleCI; for now, don't fail the build if tests fail
            if [[ $deps = high ]]; then                
                echo "$COMPONENTS" | parallel --gnu --compress "tfold {} 'cd {} && $COMPOSER_UP && $PHPUNIT_X$LEGACY'" || true
            elif [[ $deps = low ]]; then
                [[ -e ~/php-ext/composer-lowest.lock.tar ]] && tar -xf ~/php-ext/composer-lowest.lock.tar
                tar -cf ~/php-ext/composer-lowest.lock.tar --files-from /dev/null
                php .github/rm-invalid-lowest-lock-files.php $COMPONENTS
                echo "$COMPONENTS" | parallel --gnu --compress "tfold {} 'cd {} && ([ -e composer.lock ] && ${COMPOSER_UP/update/install} || $COMPOSER_UP --prefer-lowest --prefer-stable) && $PHPUNIT_X'" || true
                echo "$COMPONENTS" | xargs -n1 -I{} tar --append -f ~/php-ext/composer-lowest.lock.tar {}/composer.lock || true
            else
                echo "$COMPONENTS" | parallel --gnu --compress "tfold {} $PHPUNIT_X {}" || true
                tfold src/Symfony/Component/Console.tty $PHPUNIT src/Symfony/Component/Console --group tty
                if [[ $PHP = ${MIN_PHP%.*} ]]; then
                    export PHP=$MIN_PHP
                    tfold src/Symfony/Component/Process.sigchild SYMFONY_DEPRECATIONS_HELPER=weak php-$MIN_PHP/sapi/cli/php ./phpunit --colors=always src/Symfony/Component/Process/
                fi
            fi
          }
          EOF
    - run:
        name: Before Install
        command: |          
          source ./functions.sh
          
          echo 'export REDIS_CLUSTER_HOSTS="localhost:7000 localhost:7001 localhost:7002 localhost:7003 localhost:7004 localhost:7005"' >> $BASH_ENV
          
          # General configuration
          set -e
          stty cols 120
          mkdir /tmp/slapd
          if [ ! -e /tmp/slapd-modules ]; then
              [ -d /usr/lib/openldap ] && ln -s /usr/lib/openldap /tmp/slapd-modules || ln -s /usr/lib/ldap /tmp/slapd-modules
          fi
          slapd -f src/Symfony/Component/Ldap/Tests/Fixtures/conf/slapd.conf -h ldap://localhost:3389 &
          [ -d ~/.composer ] || mkdir ~/.composer          
          cp .composer/* ~/.composer/
          
          echo 'export PHPUNIT=$(readlink -f ./phpunit)' >> $BASH_ENV          
          echo 'export PHPUNIT_X="$PHPUNIT --exclude-group tty,benchmark,intl-data"' >> $BASH_ENV
          echo 'export COMPOSER_UP="composer update --no-progress --no-suggest --ansi"' >> $BASH_ENV
          echo 'export COMPONENTS=$(sudo find src/Symfony -mindepth 2 -type f -name phpunit.xml.dist -printf "%h\n")' >> $BASH_ENV
          
          sudo find /usr/local/etc/php -name "*xdebug.ini" -delete

          #
          # Install sigchild-enabled PHP to test the Process component on the lowest PHP matrix line
          if [[ ! $deps && $PHP_VERSION = ${MIN_PHP%.*} && ! -d php-$MIN_PHP/sapi ]]; then
              wget http://php.net/get/php-$MIN_PHP.tar.bz2/from/this/mirror -O - | tar -xj &&            
              (cd php-$MIN_PHP && ./configure --enable-sigchild --enable-pcntl && make -j2)
          fi

          #
          # php.ini configuration
          for PHP in $PHP_VERSION $php_extra; do  
              INI=/usr/local/etc/php/conf.d/circle.ini
              echo -e "[Date]\ndate.timezone = Europe/Paris" | sudo tee -a $INI > /dev/null
              echo -e "memory_limit = -1" | sudo tee -a $INI > /dev/null
              echo -e "session.gc_probability = 0" | sudo tee -a $INI > /dev/null
              echo -e "opcache.enable_cli = 1" | sudo tee -a $INI > /dev/null
              echo -e "apc.enable_cli = 1" | sudo tee -a $INI > /dev/null
              echo -e "extension = memcached.so" | sudo tee -a $INI > /dev/null
          done

          #
          # Install extra PHP extensions
          for PHP in $PHP_VERSION $php_extra; do
              INI=/usr/local/etc/php/conf.d/circle.ini
              if ! php --ri sodium > /dev/null; then                
                  tfold ext.libsodium tpecl libsodium sodium.so $INI
              fi
              tfold ext.apcu tpecl apcu-5.1.16 apcu.so $INI
              tfold ext.mongodb tpecl mongodb-1.6.0alpha1 mongodb.so $INI
              tfold ext.igbinary tpecl igbinary-2.0.8 igbinary.so $INI
              tfold ext.zookeeper tpecl zookeeper-0.7.1 zookeeper.so $INI
              tfold ext.amqp tpecl amqp-1.9.4 amqp.so $INI
              tfold ext.memcached tpecl memcached-3.1.3 memcached.so $INI
              tfold ext.redis tpecl redis-4.3.0 redis.so $INI "no"
          done

          #    
          # List all php extensions with versions
          php -r 'foreach (get_loaded_extensions() as $extension) echo $extension . " " . phpversion($extension) . PHP_EOL;'

          #
          # Load fixtures
          # TODO - make ldap work on CircleCI; skip them for now
          if [[ ! $skip ]]; then
              ldapadd -h localhost:3389 -D cn=admin,dc=symfony,dc=com -w symfony -f src/Symfony/Component/Ldap/Tests/Fixtures/data/base.ldif &&            
              ldapadd -h localhost:3389 -D cn=admin,dc=symfony,dc=com -w symfony -f src/Symfony/Component/Ldap/Tests/Fixtures/data/fixtures.ldif
          fi
    - run:
        name: Install
        command: |    
          source ./functions.sh
          
          # Install the phpunit-bridge from a PR if required
          #
          # To run a PR with a patched phpunit-bridge, first submit the patch for the
          # phpunit-bridge as a separate PR against the next feature-branch then
          # uncomment and update the following line with that PR number
          #SYMFONY_PHPUNIT_BRIDGE_PR=32886
          if [[ $SYMFONY_PHPUNIT_BRIDGE_PR ]]; then
              git fetch origin refs/pull/$SYMFONY_PHPUNIT_BRIDGE_PR/head
              git rm -rq src/Symfony/Bridge/PhpUnit
              git checkout -q FETCH_HEAD -- src/Symfony/Bridge/PhpUnit
              SYMFONY_VERSION=$(cat src/Symfony/Bridge/PhpUnit/composer.json | grep '^ *"dev-master". *"[1-9]' | grep -o '[0-9.]*')
              sed -i 's/"symfony\/phpunit-bridge": ".*"/"symfony\/phpunit-bridge": "'$SYMFONY_VERSION'.x@dev"/' composer.json
              rm -rf .phpunit
          fi
          
          #
          # Create local composer packages for each patched components and reference them in composer.json files when cross-testing components
          if [[ ! $deps ]]; then
              php .github/build-packages.php HEAD^ src/Symfony/Bridge/PhpUnit src/Symfony/Contracts
          else
              echo 'export SYMFONY_DEPRECATIONS_HELPER=weak' >> $BASH_ENV &&
              cp composer.json composer.json.orig &&
              echo -e '{\n"require":{'"$(grep phpunit-bridge composer.json)"'"php":"*"},"minimum-stability":"dev"}' > composer.json &&
              php .github/build-packages.php HEAD^ $COMPONENTS &&
              mv composer.json composer.json.phpunit &&
              mv composer.json.orig composer.json
          fi
          if [[ $SYMFONY_PHPUNIT_BRIDGE_PR ]]; then
              git rm -fq -- src/Symfony/Bridge/PhpUnit/composer.json
              git diff --staged -- src/Symfony/Bridge/PhpUnit/ | git apply -R --index
          fi          

          #
          # For the master branch, when deps=high, the version before master is checked out and tested with the locally patched components
          if [[ $deps = high && $CIRCLE_BRANCH = master ]]; then
              SYMFONY_VERSION=$(git ls-remote --heads | grep -o '/[1-9].*' | tail -n 1 | sed s/.//) &&
              git fetch origin $SYMFONY_VERSION &&
              git checkout -m FETCH_HEAD &&
              COMPONENTS=$(sudo find src/Symfony -mindepth 2 -type f -name phpunit.xml.dist -printf '%h\n')
          else
              SYMFONY_VERSION=$(cat composer.json | grep '^ *"dev-master". *"[1-9]' | grep -o '[0-9.]*')
          fi

          #
          # Skip the phpunit-bridge on not-master branches when $deps is empty
          if [[ ! $deps && $CIRCLE_BRANCH != master ]]; then
              COMPONENTS=$(sudo find src/Symfony -mindepth 3 -type f -name phpunit.xml.dist -not -wholename '*/Bridge/PhpUnit/*' -printf '%h\n')
          fi

          #
          # Install symfony/flex
          if [[ $deps = low ]]; then
              echo 'export SYMFONY_REQUIRE=">=2.3"' >> $BASH_ENV
          else
              echo 'export SYMFONY_REQUIRE='">=$SYMFONY_VERSION" >> $BASH_ENV
          fi
          composer global require --no-progress --no-scripts --no-plugins symfony/flex dev-master

          #
          # Legacy tests are skipped when deps=high and when the current branch version has not the same major version number than the next one
          [[ $deps = high && ${SYMFONY_VERSION%.*} != $(git show $(git ls-remote --heads | grep -FA1 /$SYMFONY_VERSION | tail -n 1):composer.json | grep '^ *"dev-master". *"[1-9]' | grep -o '[0-9]*' | head -n 1) ]] && LEGACY=,legacy

          export COMPOSER_ROOT_VERSION=$SYMFONY_VERSION.x-dev
          if [[ $deps ]]; then mv composer.json.phpunit composer.json; fi          
          
          php -i    
    - run: 
        name: Run Tests
        command: |
          source ./functions.sh
          for PHP in $PHP_VERSION $php_extra; do (run_tests $PHP); done
    - save_cache:
        key: dependencies-v1-{{ .Environment.CIRCLE_JOB }}
        paths:
          - php-7.1.3
          - .phpunit
          - ~/php-ext          

jobs: 
  php_7_1:
    docker:
      - image: circleci/php:7.1.27-stretch      
      - image: memcached
      - image: circleci/mongo
      - image: circleci/redis
      - image: grokzen/redis-cluster:5.0.4
      - image: rabbitmq
    environment:
      PHP_VERSION: 7.1.27
    resource_class: large
    steps:
      - run-build
      
  php_7_2:
    docker:
      - image: circleci/php:7.2.15-zts-stretch      
      - image: memcached
      - image: circleci/mongo
      - image: circleci/redis
      - image: grokzen/redis-cluster:5.0.4
      - image: rabbitmq
    environment:      
      deps: high
      PHP_VERSION: 7.2.15
    resource_class: large
    steps:
      - run-build
      
  php_7_3:
    docker:
      - image: circleci/php:7.3.2-zts-stretch      
      - image: memcached
      - image: circleci/mongo
      - image: circleci/redis
      - image: grokzen/redis-cluster:5.0.4
      - image: rabbitmq
    environment:      
      deps: low
      PHP_VERSION: 7.3.2
    resource_class: large
    steps:
      - run-build
  
  debug:
    working_directory: ~/symfony
    machine:
      image: ubuntu-1604:201903-01
    environment:
      MIN_PHP: 7.1.3
      SYMFONY_PROCESS_PHP_TEST_BINARY: ~/.phpenv/shims/php
      MESSENGER_AMQP_DSN: 'amqp://localhost/%2f/messages'
      MESSENGER_REDIS_DSN: 'redis://127.0.0.1:7001/messages'
      SYMFONY_PHPUNIT_DISABLE_RESULT_CACHE: 1
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo apt update
            sudo apt install -y parallel language-pack-fr-base ldap-utils slapd zookeeperd libzookeeper-mt-dev rabbitmq-server
      - run:
          name: Script
          command: |
            # Install PHP
            # Build dependencies.
            sudo apt-get install -y build-essential git-core curl wget cmake
            sudo apt-get -y build-dep php-cli
            sudo apt-get install -y libcurl4-openssl-dev libmcrypt-dev libreadline-dev libxslt1-dev libxml2-dev libtidy-dev re2c libmemcached-dev libldb-dev libldap2-dev
            #sudo apt-get install -y bison re2c libbz2-dev libssl-dev pkg-config libjpeg-dev libpng-dev libmcrypt-dev libreadline-dev libxslt-dev libzip-dev autoconf libc-client-dev libkrb5-dev
            #sudo apt-get install -y libgmp-dev libmagickwand-dev libmagickcore-dev linux-libc-dev libyaml-dev libmemcached-dev libxpm-dev libwebp-dev
            
            # Install PHP
            #sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157
            #sudo add-apt-repository -y ppa:ondrej/php
            #sudo apt-get update
            #sudo apt-get install php7.2

            # Installer for phpenv.
            #curl -L http://git.io/phpenv-installer | bash
            #curl -L https://raw.githubusercontent.com/phpenv/phpenv-installer/master/bin/phpenv-installer | bash            
            
            #export PHPENV_ROOT="/home/circleci/.phpenv"
            #if [ -d "${PHPENV_ROOT}" ]; then
            #  export PATH="${PHPENV_ROOT}/bin:${PATH}"
            #  eval "$(phpenv init -)"
            #fi

            # List available PHP builds to install.
            #phpenv install --list

            # Install php70
            #phpenv install 7.0.27

            # Install php71
            #phpenv install 7.1.30

            # Install php72
            #phpenv install 7.2.21
            
            export PHP_VERSION=7.2.21
            
            #PHP_BUILD_ZTS_ENABLE=yes PHP_BUILD_CONFIGURE_OPTS="--enable-debug --with-pear" phpenv install 7.2.21
            #--with-ldap=yes 

            #for PHP_PATH in $HOME/.phpenv/versions/[0-9].[0-9].[0-9]*; do
            #  PHP_VERSION=${PHP_PATH##*/};
            #  unlink "${HOME}/.phpenv/versions/${PHP_VERSION%.*}" 2>/dev/null
            #  ln -s "${PHP_PATH}" "${HOME}/.phpenv/versions/${PHP_VERSION%.*}" 2>/dev/null
            #done

            #phpenv rehash
          
            
            
            # Enable Sury ppa
            #sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157
            #sudo add-apt-repository -y ppa:ondrej/php
            
            # CCI disable
            #sudo rm /etc/apt/sources.list.d/google-chrome.list
            #sudo rm /etc/apt/sources.list.d/mongodb-3.4.list
            # CCI disable
            
            #sudo apt update
            #sudo apt install -y librabbitmq-dev libsodium-dev

            # Start Redis cluster
            #docker pull grokzen/redis-cluster:5.0.4
            #docker run -d -p 7000:7000 -p 7001:7001 -p 7002:7002 -p 7003:7003 -p 7004:7004 -p 7005:7005 --name redis-cluster grokzen/redis-cluster:5.0.4
            #export REDIS_CLUSTER_HOSTS='localhost:7000 localhost:7001 localhost:7002 localhost:7003 localhost:7004 localhost:7005'

            # General configuration
            set -e
            stty cols 120
            mkdir /tmp/slapd
            if [ ! -e /tmp/slapd-modules ]; then
                [ -d /usr/lib/openldap ] && ln -s /usr/lib/openldap /tmp/slapd-modules || ln -s /usr/lib/ldap /tmp/slapd-modules
            fi
            #slapd -f src/Symfony/Component/Ldap/Tests/Fixtures/conf/slapd.conf -h ldap://localhost:3389 &
            sudo cp -f src/Symfony/Component/Ldap/Tests/Fixtures/conf/slapd.conf /etc/ldap/ldap.conf
            sudo slapd -h ldap://localhost:3389 -d 65 &
            #slapd -f src/Symfony/Component/Ldap/Tests/Fixtures/conf/slapd.conf -h ldap://localhost:3389
            #[ -d ~/.composer ] || mkdir ~/.composer
            #cp .composer/* ~/.composer/
            #export PHPUNIT=$(readlink -f ./phpunit)
            #export PHPUNIT_X="$PHPUNIT --exclude-group tty,benchmark,intl-data"
            #export COMPOSER_UP='composer update --no-progress --no-suggest --ansi'
            #export COMPONENTS=$(find src/Symfony -mindepth 2 -type f -name phpunit.xml.dist -printf '%h\n')
            #find ~/.phpenv -name xdebug.ini -delete
            nanoseconds () {
                local cmd="date"
                local format="+%s%N"
                local os=$(uname)
                if hash gdate > /dev/null 2>&1; then
                  cmd="gdate"
                elif [[ "$os" = Darwin ]]; then
                  format="+%s000000000"
                fi
                $cmd -u $format
            }
            export -f nanoseconds
            # tfold is a helper to create folded reports
            tfold () {
                local title="🐘 $PHP $1"
                local fold=$(echo $title | sed -r 's/[^-_A-Za-z0-9]+/./g')
                shift
                local id=$(printf %08x $(( RANDOM * RANDOM )))
                local start=$(nanoseconds)
                echo -e "travis_fold:start:$fold"
                echo -e "travis_time:start:$id"
                echo -e "\\e[1;34m$title\\e[0m"
                bash -xc "$*" 2>&1
                local ok=$?
                local end=$(nanoseconds)
                echo -e "\\ntravis_time:end:$id:start=$start,finish=$end,duration=$(($end-$start))"
                (exit $ok) &&
                    echo -e "\\e[32mOK\\e[0m $title\\n\\ntravis_fold:end:$fold" ||
                    echo -e "\\e[41mKO\\e[0m $title\\n"
                (exit $ok)
            }
            export -f tfold
            # tpecl is a helper to compile and cache php extensions
            tpecl () {
                local ext_name=$1
                local ext_so=$2
                local INI=$3
                local input=${4:-yes}
                local ext_dir=$(php -r "echo ini_get('extension_dir');")
                local ext_cache=~/php-ext/$(basename $ext_dir)/$ext_name
                if [[ -e $ext_cache/$ext_so ]]; then
                    echo extension = $ext_cache/$ext_so >> $INI
                else
                    rm ~/.pearrc /tmp/pear 2>/dev/null || true
                    mkdir -p $ext_cache
                    echo $input | pecl install -f $ext_name &&
                    cp $ext_dir/$ext_so $ext_cache
                fi
            }
            export -f tpecl
            
            echo "*** A"

            # Install sigchild-enabled PHP to test the Process component on the lowest PHP matrix line
            #if [[ ! $deps && $PHP_VERSION = ${MIN_PHP%.*} && ! -d php-$MIN_PHP/sapi ]]; then
            #    echo "*** B"
            #    wget http://php.net/get/php-$MIN_PHP.tar.bz2/from/this/mirror -O - | tar -xj &&
            #    (cd php-$MIN_PHP && ./configure --enable-sigchild --enable-pcntl && make -j2)
            #fi

            # php.ini configuration
            #for PHP in $PHP_VERSION $php_extra; do
            #    echo "*** C"
            #    phpenv global $PHP 2>/dev/null || (cd / && wget https://s3.amazonaws.com/travis-php-archives/binaries/ubuntu/14.04/x86_64/php-$PHP.tar.bz2 -O - | tar -xj)
            #    echo "*** D"
            #    INI=~/.phpenv/versions/$PHP/etc/conf.d/travis.ini
            #    echo date.timezone = Europe/Paris >> $INI
            #    echo memory_limit = -1 >> $INI
            #    echo session.gc_probability = 0 >> $INI
            #    echo opcache.enable_cli = 1 >> $INI
            #    echo apc.enable_cli = 1 >> $INI
            #    echo extension = memcached.so >> $INI
            #done

            # Install extra PHP extensions
            #for PHP in $PHP_VERSION $php_extra; do
            #    export PHP=$PHP
            #    phpenv global $PHP
            #    INI=~/.phpenv/versions/$PHP/etc/conf.d/travis.ini
            #    if ! php --ri sodium > /dev/null; then
            #        tfold ext.libsodium tpecl libsodium sodium.so $INI
            #    fi
            #    tfold ext.apcu tpecl apcu-5.1.17 apcu.so $INI
            #    tfold ext.mongodb tpecl mongodb-1.6.0alpha1 mongodb.so $INI
            #    tfold ext.igbinary tpecl igbinary-2.0.8 igbinary.so $INI
            #    tfold ext.zookeeper tpecl zookeeper-0.7.1 zookeeper.so $INI
            #    tfold ext.amqp tpecl amqp-1.9.4 amqp.so $INI
            #    tfold ext.redis tpecl redis-4.3.0 redis.so $INI "no"
            #done

            # List all php extensions with versions
            #php -r 'foreach (get_loaded_extensions() as $extension) echo $extension . " " . phpversion($extension) . PHP_EOL;'


            # Load fixtures
            #if [[ ! $skip ]]; then
                ldapadd -h localhost:3389 -d 65 -D cn=admin,dc=symfony,dc=com -w symfony -f src/Symfony/Component/Ldap/Tests/Fixtures/data/base.ldif 
                #&&
                #ldapadd -h localhost:3389 -D cn=admin,dc=symfony,dc=com -w symfony -f src/Symfony/Component/Ldap/Tests/Fixtures/data/fixtures.ldif
            #fi
      
workflows:
  version: 2
  build:
    jobs:
      - debug
#       - php_7_1
#       - php_7_2
#       - php_7_3
